import type { Meta, StoryObj } from '@storybook/react'
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from './Card'

const meta = {
  title: 'Design System/Card',
  component: Card,
  parameters: {
    layout: 'centered',
    docs: {
      description: {
        component: 'A versatile card component with multiple variants and composable parts. Perfect for displaying grouped content with proper spacing and visual hierarchy.'
      }
    }
  },
  tags: ['autodocs'],
  argTypes: {
    variant: {
      control: { type: 'select' },
      options: ['default', 'elevated', 'outlined'],
      description: 'The visual variant of the card'
    },
    padding: {
      control: { type: 'select' },
      options: ['none', 'sm', 'md', 'lg'],
      description: 'The padding of the card'
    },
  },
} satisfies Meta<typeof Card>

export default meta
type Story = StoryObj<typeof meta>

// Basic stories
export const Default: Story = {
  render: (args) => ({
    template: `
      <Card {...args}>
        <p>This is a default card with some content.</p>
      </Card>
    `
  }),
}

export const Elevated: Story = {
  args: {
    variant: 'elevated',
  },
  render: (args) => ({
    template: `
      <Card {...args}>
        <p>This is an elevated card with enhanced shadow.</p>
      </Card>
    `
  }),
}

export const Outlined: Story = {
  args: {
    variant: 'outlined',
  },
  render: (args) => ({
    template: `
      <Card {...args}>
        <p>This is an outlined card with no shadow.</p>
      </Card>
    `
  }),
}

// Composable parts
export const WithHeader: Story = {
  render: () => ({
    template: `
      <Card className="w-80">
        <CardHeader>
          <CardTitle>Card Title</CardTitle>
          <CardDescription>
            This is a card description that provides more context.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <p>This is the main content of the card.</p>
        </CardContent>
      </Card>
    `
  }),
}

export const WithFooter: Story = {
  render: () => ({
    template: `
      <Card className="w-80">
        <CardHeader>
          <CardTitle>Card Title</CardTitle>
          <CardDescription>Card description</CardDescription>
        </CardHeader>
        <CardContent>
          <p>This card includes a footer with actions.</p>
        </CardContent>
        <CardFooter className="justify-between">
          <Button variant="outline">Cancel</Button>
          <Button>Save</Button>
        </CardFooter>
      </Card>
    `
  }),
}

export const CompleteCard: Story = {
  render: () => ({
    template: `
      <Card className="w-96">
        <CardHeader>
          <CardTitle>Complete Card Example</CardTitle>
          <CardDescription>
            This card demonstrates all the available parts working together.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <p className="text-sm font-medium mb-2">Features:</p>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>• Header with title and description</li>
              <li>• Content area with proper spacing</li>
              <li>• Footer with action buttons</li>
              <li>• Responsive and accessible</li>
            </ul>
          </div>
        </CardContent>
        <CardFooter className="flex justify-end space-x-2">
          <Button variant="outline">Cancel</Button>
          <Button>Confirm</Button>
        </CardFooter>
      </Card>
    `
  }),
}

// Different padding options
export const NoPadding: Story = {
  args: {
    padding: 'none',
  },
  render: (args) => ({
    template: `
      <Card {...args} className="w-80">
        <div className="bg-blue-50 p-4">
          <h3 className="font-semibold">No Padding Card</h3>
          <p className="text-sm text-gray-600 mt-1">
            This card has no default padding, allowing for full control over content layout.
          </p>
        </div>
      </Card>
    `
  }),
}

export const SmallPadding: Story = {
  args: {
    padding: 'sm',
  },
  render: (args) => ({
    template: `
      <Card {...args} className="w-80">
        <h3 className="font-semibold">Small Padding</h3>
        <p className="text-sm text-gray-600 mt-1">
          This card uses small padding (16px).
        </p>
      </Card>
    `
  }),
}

export const LargePadding: Story = {
  args: {
    padding: 'lg',
  },
  render: (args) => ({
    template: `
      <Card {...args} className="w-80">
        <h3 className="font-semibold">Large Padding</h3>
        <p className="text-sm text-gray-600 mt-1">
          This card uses large padding (32px).
        </p>
      </Card>
    `
  }),
}

// Real-world examples
export const NodeCard: Story = {
  render: () => ({
    template: `
      <Card className="w-96">
        <CardHeader>
          <CardTitle>React Components Best Practices</CardTitle>
          <CardDescription>
            A comprehensive guide to building scalable React components
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            <div className="flex flex-wrap gap-2">
              <span className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">
                React
              </span>
              <span className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full">
                Components
              </span>
              <span className="bg-purple-100 text-purple-800 text-xs px-2 py-1 rounded-full">
                Best Practices
              </span>
            </div>
            <p className="text-sm text-gray-500">
              File: components/react-best-practices.md
            </p>
            <p className="text-sm text-gray-600">
              Learn how to structure and organize your React components for maximum reusability and maintainability.
            </p>
          </div>
        </CardContent>
        <CardFooter className="justify-between">
          <span className="text-xs text-gray-400">Updated 2 days ago</span>
          <div className="flex space-x-2">
            <Button size="sm" variant="outline">Edit</Button>
            <Button size="sm" variant="destructive">Delete</Button>
          </div>
        </CardFooter>
      </Card>
    `
  }),
  parameters: {
    docs: {
      description: {
        story: 'An example of how the card might be used to display a node in the Roam Web application'
      }
    }
  },
}

// All variants showcase
export const AllVariants: Story = {
  render: () => ({
    template: `
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 p-6">
        <Card>
          <CardHeader>
            <CardTitle className="text-base">Default</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-gray-600">
              Standard card with subtle shadow and border.
            </p>
          </CardContent>
        </Card>
        
        <Card variant="elevated">
          <CardHeader>
            <CardTitle className="text-base">Elevated</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-gray-600">
              Enhanced shadow for more prominence.
            </p>
          </CardContent>
        </Card>
        
        <Card variant="outlined">
          <CardHeader>
            <CardTitle className="text-base">Outlined</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-gray-600">
              Emphasized border with no shadow.
            </p>
          </CardContent>
        </Card>
      </div>
    `
  }),
  parameters: {
    layout: 'padded',
    docs: {
      description: {
        story: 'Overview of all available card variants'
      }
    }
  },
}